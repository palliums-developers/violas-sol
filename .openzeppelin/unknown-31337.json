{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "txHash": "0x47999c888bb66542952f8910b14820464df103145f8a0ba9d46c46ae0779bba6",
    "deployTransaction": {
      "hash": "0x47999c888bb66542952f8910b14820464df103145f8a0ba9d46c46ae0779bba6",
      "type": 2,
      "accessList": [],
      "blockHash": "0xdeaa800cc714c5c148f4e2b96c839d427dbc0ab43c93cf8e4a1daf1d7e7456b5",
      "blockNumber": 2,
      "transactionIndex": 0,
      "confirmations": 1,
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x3c42c295"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x342770c0"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x3c42c295"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 1,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x8be7f02d075ca600734c2b844311db1ddde973152794f34b61a0149e3e9520b8",
      "s": "0x5b8a074fda7a13d71b3a53f912cc726a2730288b6a1ebfc3187d5a62b56d1d50",
      "v": 1,
      "creates": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "chainId": 31337
    }
  },
  "proxies": [
    {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0x8747d5c0ae637b80421ebde2e41e13e28f123db42f6187451baae4a411f6ae57",
      "kind": "transparent"
    },
    {
      "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
      "txHash": "0x2a3e7d18e35fd4e29678bbeca56c7835727acfeb50cfebebdbce5543b2e11ab0",
      "kind": "transparent"
    },
    {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0xa0b7ea806b201288de3f748f34a6b63eb1e9f087e42e67d6ab9c73fb35fe3917",
      "kind": "transparent"
    },
    {
      "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
      "txHash": "0xf27bb749c682b9e40af0ce37d300bf71702ed8e6f40fd453ebfc29a375ab43fa",
      "kind": "transparent"
    },
    {
      "address": "0x9A676e781A523b5d0C0e43731313A708CB607508",
      "txHash": "0xddcdce7b7f0fa1c1d6203d65d978cf7cbdce415f0dde90e7a95ce55e641f0982",
      "kind": "transparent"
    },
    {
      "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
      "txHash": "0xa566c04c348120f6734deed230affb14ea8c7a9f717e844e50dc525f4370066c",
      "kind": "transparent"
    },
    {
      "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      "txHash": "0x028d820b6b22e975113e65b4f5ed38c5c9554b8aa38d2c185fa75329d1640c4a",
      "kind": "transparent"
    },
    {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0x9b2d515bb62834e9d5427d8ff8ce251c21543aeace77363b98f23b942ff4661d",
      "kind": "transparent"
    },
    {
      "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "txHash": "0xf5e050c9948a6622574ce997077afd6a956a028f116dcb8e4c73bfb6aa708ded",
      "kind": "transparent"
    },
    {
      "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
      "txHash": "0x13a48543d77a77de0a915e318fd70bbc440c4ebf8192268b97202f30adc5cb39",
      "kind": "transparent"
    },
    {
      "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
      "txHash": "0xe47ab84bac3d6a3883200e2dd881df23a614801f6b224ed8be0239c1c8443142",
      "kind": "transparent"
    },
    {
      "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
      "txHash": "0x2cfef1cf7d24720102294bcfe08ad57b951fb969f41b9468d3cce0287294a675",
      "kind": "transparent"
    },
    {
      "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
      "txHash": "0x4e5b0cbc9b8b8ba93f9d2b5cc718de8f2070dc5319644f55e97c596578bff9bb",
      "kind": "transparent"
    },
    {
      "address": "0xc5a5C42992dECbae36851359345FE25997F5C42d",
      "txHash": "0x8df2001a4183b909ad89d96d703c8b4ea1f5aa94470a3d0f960992fe5d65642f",
      "kind": "transparent"
    },
    {
      "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
      "txHash": "0x53dbb46b5e6c34a89cc45a29cc48dfc4a53a312579f60be44442896f9cc8c513",
      "kind": "transparent"
    },
    {
      "address": "0x70e0bA845a1A0F2DA3359C97E0285013525FFC49",
      "txHash": "0x7010e7b70e923fb7a1d3f62c7d192a5c29edee2e69587378de2ad3e5ea692641",
      "kind": "transparent"
    },
    {
      "address": "0x809d550fca64d94Bd9F66E60752A544199cfAC3D",
      "txHash": "0x62700b4885effa3db66916c00d1b161b3f57bb23989f1c75d29454aaad5492c8",
      "kind": "transparent"
    },
    {
      "address": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
      "txHash": "0x3cbc0ad8a54158488ae0e15f7272dd35a477dcb7138fa38c31a8ff5518385900",
      "kind": "transparent"
    },
    {
      "address": "0x922D6956C99E12DFeB3224DEA977D0939758A1Fe",
      "txHash": "0x765fcef32b3ba956508a884f43ecb187677714c7d08baa51ae8fd2181fdca68b",
      "kind": "transparent"
    },
    {
      "address": "0x8198f5d8F8CfFE8f9C413d98a0A55aEB8ab9FbB7",
      "txHash": "0x202d00db992c6cff4a97f2d3de1c87365f1ba5062694d8678363c5c0c2f4dd3b",
      "kind": "transparent"
    },
    {
      "address": "0xD84379CEae14AA33C123Af12424A37803F885889",
      "txHash": "0x9280ddbe14d63c250cc9399202db52c38b58cbf6b03afd3a8dcc6e663822cfca",
      "kind": "transparent"
    },
    {
      "address": "0xC9a43158891282A2B1475592D5719c001986Aaec",
      "txHash": "0x459e1956bb23033ba2b8be953ffbbd2f886ff66734ae3b6f375668275319e3e8",
      "kind": "transparent"
    },
    {
      "address": "0x4C2F7092C2aE51D986bEFEe378e50BD4dB99C901",
      "txHash": "0x32e74601c58af212979531c99be81c8cd28c46e7ae0f997f3df7f506c6034d15",
      "kind": "transparent"
    },
    {
      "address": "0x4631BCAbD6dF18D94796344963cB60d44a4136b6",
      "txHash": "0x041e632cdc932e1c9df708b840c6bc2c73e80ea535dc350c87d9deaaa9a40f5d",
      "kind": "transparent"
    },
    {
      "address": "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
      "txHash": "0xdc1f680159cfc399a75e3846d49694c1581260a43a120fcc3e35624a8e13b934",
      "kind": "transparent"
    },
    {
      "address": "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3",
      "txHash": "0x16f59c32d26e36889d4be9eca59e551ce89f6a5ef96fdfe00a5d13da1d796bdb",
      "kind": "transparent"
    },
    {
      "address": "0x18E317A7D70d8fBf8e6E893616b52390EbBdb629",
      "txHash": "0x34d5bcddf92142e6f9a5c20043ef6fc709a79c6c500467a14c7b21e660c824d7",
      "kind": "transparent"
    },
    {
      "address": "0xc96304e3c037f81dA488ed9dEa1D8F2a48278a75",
      "txHash": "0x9c8646c27633ba4bfd256437f29140da3b0254ae56ab0abe67781da42361a50d",
      "kind": "transparent"
    },
    {
      "address": "0xD0141E899a65C95a556fE2B27e5982A6DE7fDD7A",
      "txHash": "0x1aa3ada676c1d0efdc488c99006520b9e40d35ac6fa0f1799f67ceedca6b09da",
      "kind": "transparent"
    },
    {
      "address": "0xA7c59f010700930003b33aB25a7a0679C860f29c",
      "txHash": "0x1c3bf5165d5383ebe13a930ff24f7d141e23b95835080440bd57766ae551a26c",
      "kind": "transparent"
    },
    {
      "address": "0x3347B4d90ebe72BeFb30444C9966B2B990aE9FcB",
      "txHash": "0xd8e5052761b360735dd089564971cdf7beb25af0ccc2297ea6f235435dec1065",
      "kind": "transparent"
    },
    {
      "address": "0x67aD6EA566BA6B0fC52e97Bc25CE46120fdAc04c",
      "txHash": "0x9abd341f9ca43db812c40291c3c4b3db922f6d24642d388e0586bdbfbd3f9390",
      "kind": "transparent"
    },
    {
      "address": "0x987e855776C03A4682639eEb14e65b3089EE6310",
      "txHash": "0x3f4ac8a0c6f94b5f1ae4d5706291d8697e4099b0c1798e9064d126cd952c18c3",
      "kind": "transparent"
    },
    {
      "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      "txHash": "0xc47a437add19c649d2ffa6416df034d523980cb68b7c912ce57b7d5367845f3a",
      "kind": "transparent"
    },
    {
      "address": "0x235E4A333CdD327D68De53d8457C4032EeEBCBF6",
      "txHash": "0x7cb687295693cddcb229320165dcee376e8dbdf68dec38e3448cffa268a70e2c",
      "kind": "transparent"
    },
    {
      "address": "0x41dBB528b5662caD3b8183754C0517b409E00Fa8",
      "txHash": "0x0f099ad11585f9afb0b4d2e285f0cbbc62f19b1c482fb9e95323bd0623232029",
      "kind": "transparent"
    },
    {
      "address": "0xa0945a7aC164287B4e6B8f234337820807074a29",
      "txHash": "0xdd33af4540deb4c8b118545346551be04d9ee0ef5473dd8dc4c530acd1f759cb",
      "kind": "transparent"
    },
    {
      "address": "0xd36760784b287A381E58c9491624Da172414914a",
      "txHash": "0x872b9a6bb56a74e00b2dd784ac95a9c5faa1bd5ea5361d177e3c4f4d8695f465",
      "kind": "transparent"
    },
    {
      "address": "0x6dB83DF31b4402Cbd0D113481c3B1F114321d0ca",
      "txHash": "0xf245ba1ceaefdc4e486fd72dc6c57c27dabefad9fc256a02b925ac908404e8a8",
      "kind": "transparent"
    },
    {
      "address": "0x390eAE7b649037B58AD506564Fd05476038e3665",
      "txHash": "0xc46a39d3c2f8675365a1b413223b81ebc625fde35ee0224d6bab70743cd20644",
      "kind": "transparent"
    }
  ],
  "impls": {
    "77ae97b38653a9aa71d8d2cad13a17ea0be43ca3606d11f840f3eec78272913c": {
      "address": "0x67d269191c92Caf3cD7723F116c85e6E9bf55933",
      "txHash": "0x691d71e71939dcb13320bab729508e7b2f3ed478ab73894adcececb7a03c0ab9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ViolasMProofState",
            "label": "states",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/ViolasMProofState.sol:16"
          },
          {
            "contract": "ViolasMProofState",
            "label": "statesswap",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)",
            "src": "contracts/ViolasMProofState.sol:17"
          },
          {
            "contract": "ViolasMProofState",
            "label": "maxStateValue",
            "type": "t_uint256",
            "src": "contracts/ViolasMProofState.sol:18"
          },
          {
            "contract": "ViolasMProofState",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofState.sol:19"
          },
          {
            "contract": "ViolasMProofState",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofState.sol:20"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint256)": {
            "label": "mapping(string => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9a5aacb550779050f310bbe8e18489de9a82c6d165d69067d91257b31d85a5cb": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0x3a1d137e7fe713811f57077f67d50fb2b04c75e645e4c857ffd2ab04bd85c70f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "Mngable",
            "label": "managers",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ViolasMProofDatas.sol:17"
          },
          {
            "contract": "Mngable",
            "label": "manager",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/ViolasMProofDatas.sol:18"
          },
          {
            "contract": "Mngable",
            "label": "managerMaxCount",
            "type": "t_uint256",
            "src": "contracts/ViolasMProofDatas.sol:19"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofDatas.sol:145"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofDatas.sol:146"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "nextVersion",
            "type": "t_uint256",
            "src": "contracts/ViolasMProofDatas.sol:149"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "proofs",
            "type": "t_mapping(t_address,t_struct(AddressProof)6786_storage)",
            "src": "contracts/ViolasMProofDatas.sol:150"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "proofIndexs",
            "type": "t_mapping(t_uint256,t_struct(AddressIndex)6793_storage)",
            "src": "contracts/ViolasMProofDatas.sol:151"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "stateAddress",
            "type": "t_address",
            "src": "contracts/ViolasMProofDatas.sol:154"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "stateManage",
            "type": "t_contract(IViolasMProofState)8857",
            "src": "contracts/ViolasMProofDatas.sol:155"
          },
          {
            "contract": "ViolasMProofDatas",
            "label": "mainAddress",
            "type": "t_address",
            "src": "contracts/ViolasMProofDatas.sol:158"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(AddressProof)6786_storage)": {
            "label": "mapping(address => struct ViolasMProofDatas.AddressProof)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(AddressProof)6786_storage": {
            "label": "struct ViolasMProofDatas.AddressProof",
            "members": [
              {
                "label": "maxSequence",
                "type": "t_uint256"
              },
              {
                "label": "minVersion",
                "type": "t_uint256"
              },
              {
                "label": "maxVersion",
                "type": "t_uint256"
              },
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "inited",
                "type": "t_bool"
              },
              {
                "label": "proofDatas",
                "type": "t_mapping(t_uint256,t_struct(ProofData)6770_storage)"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(ProofData)6770_storage)": {
            "label": "mapping(uint256 => struct ViolasMProofDatas.ProofData)"
          },
          "t_struct(ProofData)6770_storage": {
            "label": "struct ViolasMProofDatas.ProofData",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "fee",
                "type": "t_uint256"
              },
              {
                "label": "version",
                "type": "t_uint256"
              },
              {
                "label": "sequence",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              },
              {
                "label": "data",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(AddressIndex)6793_storage)": {
            "label": "mapping(uint256 => struct ViolasMProofDatas.AddressIndex)"
          },
          "t_struct(AddressIndex)6793_storage": {
            "label": "struct ViolasMProofDatas.AddressIndex",
            "members": [
              {
                "label": "sequence",
                "type": "t_uint256"
              },
              {
                "label": "sender",
                "type": "t_address"
              },
              {
                "label": "create",
                "type": "t_bool"
              }
            ]
          },
          "t_contract(IViolasMProofState)8857": {
            "label": "contract IViolasMProofState"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2b6932daae7ef0a59590a16c594067a22fc3122e9b74471826d186fbb0315285": {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0xf99320e7f26b321a033abdd5044702089fda606da929d40f465976908e4cadfc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "TokenFactory",
            "label": "tokenMaxCount",
            "type": "t_uint256",
            "src": "contracts/TokenFactory.sol:17"
          },
          {
            "contract": "TokenFactory",
            "label": "validTokenNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/TokenFactory.sol:18"
          },
          {
            "contract": "TokenFactory",
            "label": "tokens",
            "type": "t_mapping(t_string_memory_ptr,t_address)",
            "src": "contracts/TokenFactory.sol:19"
          },
          {
            "contract": "TokenFactory",
            "label": "tokenNames",
            "type": "t_mapping(t_address,t_string_storage)",
            "src": "contracts/TokenFactory.sol:20"
          },
          {
            "contract": "TokenFactory",
            "label": "_tokenMinAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/TokenFactory.sol:21"
          },
          {
            "contract": "TokenFactory",
            "label": "_tokenMaxAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/TokenFactory.sol:22"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "contractVersion",
            "type": "t_uint256",
            "src": "contracts/ViolasMProofMain.sol:14"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofMain.sol:17"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts/ViolasMProofMain.sol:18"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "deprecated",
            "type": "t_bool",
            "src": "contracts/ViolasMProofMain.sol:19"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "payee",
            "type": "t_address",
            "src": "contracts/ViolasMProofMain.sol:20"
          },
          {
            "contract": "ViolasMProofMain",
            "label": "proofAddress",
            "type": "t_address",
            "src": "contracts/ViolasMProofMain.sol:21"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_address)": {
            "label": "mapping(string => address)"
          },
          "t_mapping(t_address,t_string_storage)": {
            "label": "mapping(address => string)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "632a073faba7429e563f5f9ebcecc8cb43f8e2bdef86216d88ff6491febfbb14": {
      "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
      "txHash": "0xec7be5b340bc1135ea1b139ec95ff7e52d40b3999427a3370215934906e9d869",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:383"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "60c1c045be6d60ba45f28863cc5f6f64d53959eb0c572edfe94e8e80aed1c453": {
      "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
      "txHash": "0xf452c7ce148f8e465c89db5dafb425d289482dd7bfd2976290c2ff33d39ef13f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:383"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "21aab4c4b2941540ca5eda5446a83fe01596c2fc155d11d4b0309cf55397116e": {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0x8103e6912d16f124c2a7d184fc4681eeade85ad3d2ae91883c3def11e337f305",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "198d49b4db36167a53b53984f077f4ad0afdbb8ce003feddb966c422b49320b3": {
      "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      "txHash": "0xed858906ed9c2bebd061dde918c9c4a68782bfe7344d5d09001841a7dc16c2c1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:583"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "bbb6fb77a5973347e24369b10d63855bae3f6c7e08467a7f11feefa72633a120": {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0x66fa27a66c12acee6cb658353d07847288666de6e07469b4bb47af9facfe41a5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:584"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "8efae7792e122e47635b2efc8eb35d02f38674f801aba31caae09b86fc12d9c8": {
      "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "txHash": "0x46e70b2fa4ba94fb1c55cb32d6c7b2abf7df4a109a331ac7208a88a4c25567e7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:584"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "3a75d7cd25f40743f9f8d5bcaac5c06ad1eb3deec2290399ec5da86009d3f2ab": {
      "address": "0x9E545E3C0baAB3E08CdfD552C960A1050f373042",
      "txHash": "0xabbfd09491e540a41c48107c0bdce5df976449bfdeae03359d869357c5c346b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:584"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "e0c46f27ae911ae3f3e43b92da4ad85423df0cd8b41ef7773fd48aa817559b33": {
      "address": "0x998abeb3E57409262aE5b751f60747921B33613E",
      "txHash": "0x1831db2fefc99cb1dec66665bfa21c7d4522c661e92f3f2048297d579603ace4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:596"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "afb0ad6c40cbfee14a3b6994eeda8a50348be2ff5949186b5e9922a2ce8e84c9": {
      "address": "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
      "txHash": "0x6360b14870a0785baf70dd572d9635923c78f38645c0d6ab9b7a4e5505421daf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:594"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "eef2954ca80c9982e574aa4e24776d7d0132847acc4ebe65dc9e620649003c5c": {
      "address": "0x7969c5eD335650692Bc04293B07F5BF2e7A673C0",
      "txHash": "0x76bd8426dd77f9f90cac69f94f186df0219b1ac82044a9a6dbf65df105253f69",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:594"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "ccd75b5fadbf2e25e88a629073837751f88ec39aabd5e433bfb61b5a8d036d69": {
      "address": "0x162A433068F51e18b7d13932F27e66a3f99E6890",
      "txHash": "0xf0a37ef415ce0949988fed28066c7fe80b21d74beb7180541a4e4886d8b0af6f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:595"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "6b01ead3e72ef09faa962278e3946a71627438db35a1152329ff0ccf04b6fde5": {
      "address": "0x36b58F5C1969B7b6591D752ea6F5486D069010AB",
      "txHash": "0x5d263ec1c8acbdcc8075a3c13f2be0e15549a0c2b1235514454537ac426ea68f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:595"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "dd16f441ae83364d3c1e2f1d057a11feec524f7436cbf668a6201c240e490fe9": {
      "address": "0xBEc49fA140aCaA83533fB00A2BB19bDdd0290f25",
      "txHash": "0xe94137552e091afc6a15b827df051f0116cfb9f5d6a085bfac9b3733cb497bd2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:595"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "7a8907be666b98c5f8752a80b6a6aac8348af7e5c61b3633ec335f5cf7f91516": {
      "address": "0x46b142DD1E924FAb83eCc3c08e4D46E82f005e0E",
      "txHash": "0xb8d8ca62937f1d6b026485c044370227249ba7165d8a61f4daf5ff8075bb760a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:595"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "3451d868b675351d665e6c61dccfc9df883d8065e7c09ea363df0e5a879d2f09": {
      "address": "0x367761085BF3C12e5DA2Df99AC6E1a824612b8fb",
      "txHash": "0xc570c0450cbd042a8543683f028e2a959e14522d55f4ef5ca4ba52a1b5b57652",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:596"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "61fe07d35ecf48541dd16250a738dee7a9ab3bd253ea1a61a769e30adb1b66bb": {
      "address": "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
      "txHash": "0xf9f3b83af548bbfec51de750f18b505a25e8900df091801d985e59aba2d47a0a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:581"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "e5516be7916155c1d4a099ebe6b8a1a22d9f8a15226397bf9f2d35903df5e7b5": {
      "address": "0xA4899D35897033b927acFCf422bc745916139776",
      "txHash": "0x87f80e8ce0b4d7c2a94809e96fdf2006b359f944de96bcf8a797ef4f0c15ebdd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:582"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "846ea46c84ab26d39727d361c54184b6f0ca48aec2b5a82528c7bdfb54184569": {
      "address": "0x5c74c94173F05dA1720953407cbb920F3DF9f887",
      "txHash": "0x2bdb62501a979a5ae24ed5e1fafe31f79d9b438ada697e8927cae52b6589b55d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:583"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "f71f5b29292ddc6ad670e43bfc685c6c014e8e8e333c90d9f9c41e7cbd0ba8f7": {
      "address": "0x5067457698Fd6Fa1C6964e416b3f42713513B3dD",
      "txHash": "0x6559e7eb859fc1d212597b90d0d614bcd5582f03db8daa2973c7ac92e65a49e4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:584"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "0eaaef072f8868dd9cb213380c4741f2ec4a0197af0dda891ad5e2f166c61452": {
      "address": "0xc0F115A19107322cFBf1cDBC7ea011C19EbDB4F8",
      "txHash": "0xb3a41d1eacc75de2424f4de4bb9df31ac10d06d88fbc68d7652513183a4e1719",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:582"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "86d7b7a917ed073b70f0cb75b136c6fcfc6144aa57c49970ec5fd7279fbfa986": {
      "address": "0x22753E4264FDDc6181dc7cce468904A80a363E44",
      "txHash": "0xeebcc187c5ca0f8c1708d7e47c39071cea383c238a5a2ad14dcbfc2867d7e1ac",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:582"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "acc1bb0607a275e16af6409aee914f9d612bbd221147f45e555260affa2f0150": {
      "address": "0x276C216D241856199A83bf27b2286659e5b877D3",
      "txHash": "0x66a1c69a1f742aae35788b83da10cf1078cf3cc65e404caa77e2cb2d7ff784f3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:581"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "2887dcade03a557c99ea0df6320713a47b1db3fab353055f6b2aa64f71f3ff4f": {
      "address": "0x162700d1613DfEC978032A909DE02643bC55df1A",
      "txHash": "0x0d03ffb6c45518330025a150627ce60bb31716b8586e29250a8cd13a5515f012",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:581"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "b078ee927c7e18c461fd74ec0892a12a5f403edc651f5c97c66dc98c00407dd3": {
      "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "txHash": "0xdb1c97e38c94da318b48ffcba0ec8ccf6b8fff1d8fe04b5c2e718f18fce665b6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:605"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "79444f78538ba0ece65f2d26a96d40f16ab48b5217ae1cdebe5885ab4c2131cb": {
      "address": "0x931Dd5E2f88F37DA1999c70D596677E06287163A",
      "txHash": "0xfcc1b81fe8661033dec40882ebec7f8e41c3fde6f8282ff924f00f00ba50f174",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:590"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "ffd5c5ed0864426a14a82a99fb02b87482b241270d4e9404a75e160a4f8c4f6d": {
      "address": "0x232A4710D1A21AfEfB021654C5B48092e5faB67F",
      "txHash": "0x4d02a82990c1a26508f32a287d708f0f145695d7ebd492e6d0687eb60288811e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:592"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "1cea911d44bb32567bf986cf9e014f0af45382675da13950c4b0acc0493de41a": {
      "address": "0x7b1E1C3dBCDCD0F0c01FCcbbA56Ad1745A30B2Ee",
      "txHash": "0x49ce2564a6512fe7fa70cad4512791a73a6ac389bae54bc0da0847c014226b1f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:605"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "7f0607f272b5e6cd73127a3231d20600ca4993ecc0459b76392f68a888de24c7": {
      "address": "0x60aC4593ecea0B22216218c4D0f27533ebB01CB6",
      "txHash": "0x191f153541195341ad0cf180ad35e17892ee99acec31d233b017de6449e34d87",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:607"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "5ac3c14170cb376e63cf6bd7261e43966585ab7e34337b786b2141425390e9b4": {
      "address": "0xaBe1D067a76A834a853c3dEd137f14696623Be08",
      "txHash": "0x50b6b168c63446b1923c5588e5d89d723beb621b683aceb75feba591c277cca4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:606"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "d9307cb67ffafcf9a75ba3dadece558216b2e0983f9289ccc905211c06968d58": {
      "address": "0x1E430CE702C8f7903BF0522Eae7faeB32634F1D2",
      "txHash": "0xe9823c164091fd21ca73a47af198bb212df2598b528a93c45fe0b1d5915d0184",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:615"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "5fda5973b43561b2ce2435e1342696111e41bf9090ee6f13879f17c8a3f9e42e": {
      "address": "0xF31c1E4a4339Df9E85f8D3f26Fb4f9C2E095a9EB",
      "txHash": "0x1cbd4b530f5ae277e510f3392204d50bb6c32e273fc62e01a15c37708380c698",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:615"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "bb4a1ea99eef7439b92f8434f45379d18123fae635db1fc81fe1b3337a479657": {
      "address": "0xbC319144A76FEe6A16FBf9A3A81c063F9E264B93",
      "txHash": "0xfcab8607e0077b4e264418b2106215f9b5a55b49a79c9fc514a4661d23674e0c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:32"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:405"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:40"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:127"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_index",
            "type": "t_uint256",
            "src": "contracts/ViolasNft1155.sol:11"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_tokens",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:14"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_totle_amount",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/ViolasNft1155.sol:17"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_token_exists",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:20"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_mark",
            "type": "t_uint64",
            "src": "contracts/ViolasNft1155.sol:23"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_version",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:26"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nft_reserve",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:29"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_pos",
            "type": "t_uint32",
            "src": "contracts/ViolasNft1155.sol:32"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_ids",
            "type": "t_mapping(t_uint32,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:33"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_brand_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:34"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:37"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:38"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_type_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:39"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:42"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:43"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:44"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_pos",
            "type": "t_uint16",
            "src": "contracts/ViolasNft1155.sol:47"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_ids",
            "type": "t_mapping(t_uint16,t_string_storage)",
            "src": "contracts/ViolasNft1155.sol:48"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_nfttype_names",
            "type": "t_mapping(t_string_memory_ptr,t_uint16)",
            "src": "contracts/ViolasNft1155.sol:49"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_blind_box_ids",
            "type": "t_mapping(t_uint16,t_bool)",
            "src": "contracts/ViolasNft1155.sol:50"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_quality_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:53"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_subtoken_index",
            "type": "t_mapping(t_uint256,t_uint32)",
            "src": "contracts/ViolasNft1155.sol:56"
          },
          {
            "contract": "ViolasNft1155",
            "label": "_unique_ids",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/ViolasNft1155.sol:59"
          },
          {
            "contract": "ViolasNft1155",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/ViolasNft1155.sol:616"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_mapping(t_uint32,t_string_storage)": {
            "label": "mapping(uint32 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "label": "mapping(string => uint32)"
          },
          "t_mapping(t_uint16,t_string_storage)": {
            "label": "mapping(uint16 => string)"
          },
          "t_mapping(t_string_memory_ptr,t_uint16)": {
            "label": "mapping(string => uint16)"
          },
          "t_mapping(t_uint16,t_bool)": {
            "label": "mapping(uint16 => bool)"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4808_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)4808_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4533_storage"
              }
            ]
          },
          "t_struct(Set)4533_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    }
  }
}
